THIS ONLY INCLUDES MAJOR ADDITIONS OR CHANGES, NOT MINOR ADDITIONS OR CHANGES

12/2/2021 - Project conceived, name for project not determined

2/??/2022 - Work began on projectiles

1/07/22 - Project uploaded to Github for 'safe-keeping'

2/16/2022 - Discovered that cannot use a global variable in a
			function without declaring 'Global' within the local scope first! 
			
			How did this slide past me the whole time? I don't know, don't ask me.
			All I do know is that stackoverflow is a wonderful resource!

2/17/2022 - Tracking issue on why clouds wont delete: "List Index out of Range" -- ignored since January (6:14 PM EST)
			Fixed @ 7:29 PM EST

			- Continued work on projectiles

2/20/2022 - Started work on Island 3, but began with the wrong point slope values. Corrected later on.
			Just learn how to read @ Boundary 10

2/22/2022 - So here's the deal. When I originally made the function in 'gameCalculations.py', that was mainly
			intended to reflect the python coordinate system into one compatible for the pygame framework. In order to
			revert that back to pygame, it took me four hours to discover that I had to recovert it back to one compatible
			for pygame again. Why? Because when I was using pygame's coordinate system, that was practically reading it
			relative to one similar to desmos meaning that we have to do the inverse operation once more by doing 900-y.

			Remember how you cannot divide by zero in math class?
			Yes, well that happened to me too...  Smh.

			Determination has been made that the projectile casting system for the player will be broken up into 4 quadrants. In addition to this, each quadrant will have
			two sub-quadrants totallying the sub-quadrant count to 8. While such need currently does not exist, the capability for this will exist for if such determination is made in
			the future.

			Starting to actually get the system to display the projectiles in place. Will be done 2/23/2022

2/26/2022 - Was working with the log history system for the game and ran into an issue when it came to getting the text to separate at an y-interval of 18 pixels.
			It was an error on my part because I was running the calculations before actually changing the values which kept giving me a value of 18.

			Example:

				log_iteration = 0
			
				y_start = 60.7
				y_add = 18 * iteration

				FOR LOOP:
					y_final = y_start + y_add :::: RETURNS --> 60.7 RATHER THAN EXPECTED RESULT

			Also in the process of making it to where the display log only shows 44 elements rather than every element at a time to conserve memory usage.
				As far as updating the display log list went, it was also an error on my part as I had to update the display log history while the game was running
				otherwise, some of the log entries would be missing since it would only update if you opened the menu.

2/27/22 - Added capability to show what you are going to playing as before the game actually starts.
		  Still has to be worked on somewhat that way you can actually play as the right entity. Will be done tomorrow.

2/28/22 - Performance has been noticed to been heavily impacted when utilizing the Fighter. The size of the fighter has to be scaled down to its desirable size
			that is fit for ingame use; otherwise, if the game scales it down, it sucks up processing power slowing down performance. I have tried to use multi-threading
			at first but that has proven to be a fruitless attempt in which I just completely tossed it to the curb and just stomped on it.

3/3/22 - Dumb-AI development started.
			Just a bunch of conditional statements as expected,
			nothing special to it. Really.
			
			Issue in hit boundaries at Island 2. Has to do something with Sub-Region 7 and or Box 3
			
3/4/22 - Boundary issue was actually at Sub-Region 3. It was just a mistake in regards to inequality comparison operators.

3/7/22 - Began work for AI to bounce-back from walls when too close.
		
			Also added "Splash" screen

			Adding 'player cooldown' for firing sequences
				- Originally did not work because of order of operations when comparing operators
				- Mistyped variable as well and that had something to do with it not working

3/8/22 - Fixed AI traversing through land while moving backwards
			- misplaced else statement allowed for this to happen

		- AI can now fire at other entities that are travelling on the map.
			- Will make it to where the firing interval is more randomized so not every AI is firing concurrently at the same time. This will
			help save performance as-well.

			- The computer will find the closest entity to fire at relative to the AI that is currently selected.

3/9/22 - Beginning work on collision detection. Should be easy as cake.
		- There is now a menu for when the player dies

		- Have to work on a system for when the AI dies

		- Players and projectiles can now collide
			- Utilizes pygame's rectangle class and the collision detection method

		- Started work on health bar, which was long overdue, system is yet to be decided on this

3/10/22 - Finished health bar
			Instead of having one only for the player, I decided to make each entity have one that appears right underneath it.

			I am also planning on changing the max health for all aircrafts that way they are not harder to destroy than what ships are since these
			fighters are faster than ships for having weaker armor.

			Also a system to where entities can spread out once they spawn so they are not destroyed upon spawning

			Logs is still showing an object type of 'None' originating from somewhere, this should not be happening
				(It was found in the computer_movement module under the move_entities() function)

		Game NPCs will have an inaccurate weapons fire of 0-50 pixels, chosen at random.

3/16/22 - Doing UI Revamps by changing design and color
			- Oil is now opaque rather than not being transparent

3/17/22 - 'The Sleepless Night'

	- Episode 1: The Programmer Strikes Back
		The Quality Assurance team has failed to provide useful information on
		the collision system within Naval Warfare 2D. The Programmer was furious and decided
		to take such action to fix such a mistake that he has overlooked! This programer aims to
		be 100% accurate when writing code by misses critical details like every other! Will be be
		successful in his attempt to fix the collision system or will he fail? Come back on 3/18/22 to find out!

	- Quality Assurance COLLISION DETECTION:
		- Aircraft can no longer collide with each other or Seacraft
			We must know that Aircraft travel at varying altitudes and will not travel on the same plane
			In addition, most pilots do not want to collide but rather want to survive their air-to-air battles.
			This will create a more useful environment for an aircraft carrier owned by the player!

		- Only Seacraft can collide with each other.+
			IF you HAVE any questions, speak to your local U.S. Navy Recruiter! (/s)


	- IT IS CURRENTLY ACKNOWLEDGED THAT FRIENDLY TARGETS DO FIRE AT EACHOTHER. HOWEVER, THEY DO NOT CAUSE DAMAGE. THIS IS *SORT OF* WORKING AS INTENDED
	- IFF tags added (Meaning: Identify Friend or Foe)

	- Episode 2: The Programmer Actually Gets Stuff Done
		The programmer has successfully completed the long and dreadful night of having no sleep! The Quality Assurance Team is still 'asnoozing' their night away!
		The programmer has managed to implement a way to determine whether the player is going to be firing at an hostile or a friendly which is a big +++ in the game's
		gameplay! It has also managed to *ALMOST* work the first try but there were minor detail that had to be fine-tuned when it came to positioning, which is an overall success!
		The programmer is still thinking about how to get the friendly units to stop firing at each other, check back in Episode 3 to see whether this happens or not!

	- Cannon Fire:
		Done by hitting my hand on my laptop while the mic was running, very clever!

	- Game would not reset because of a misplaced and/or statement on line 217 of Python_Experimentation.py
		In addition, this had to be enclosed within a set of parenthesis.

3/18/22
	Players can now restart the game no matter what the state of the game currently is.
	
	Carried out some minor improvements when it comes to clearing the screen after the death of the player or after
	conducting a restart.

	Added a loading bar to the loading screen; that way, players do not think that the game is currently broken.

	Fixed an issue where you cannot arrow left @ the ship selection screen. This was because of conflicting if-else conditions at a
	very specific X value pass-off

	!! AND YES, I PAINTED MY MOUSE, OKAY?!?! IT'S ELECTRIC BLUE! !!

	Menu interface practically 100% works with the exception of the player stats Menu